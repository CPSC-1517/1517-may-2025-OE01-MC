@page "/data-entry"
@rendermode InteractiveServer

@using OOPsReview

<PageTitle>Data Entry</PageTitle>

<h3>DataEntry</h3>
<p>Employment Data Collection</p>

<blockquote>
	<p>
		This component will demonstrate how your page can handle validation of data input,
		showing validation messages when you have a number of controls for data entry. This
		component will validate the locate controls and create any validation messages for
		invalid data. The messages can be collected using various techniques such as: List or
		Dictionary.
	</p>
	<p>
		This page will input data for an instance of the Employment class. This demo will
		use the Employment class from the OOPs review. The SupervisoryLevel enum
		class will also be brought into this project. One could have included the entire
		class library as part of this solution instead of bringing in individual classes.
	</p>
</blockquote>

@if (!String.IsNullOrWhiteSpace(FeedbackMsg))
{
	<div class="alert alert-success">
		<p>
			@FeedbackMsg
		</p>
	</div>
}

@if (ErrorMsgs.Count > 0)
{
	<div class="alert alert-danger">
		<p>Please fix the following errors:</p>
		<ul>
			@foreach(var error in ErrorMsgs)
			{
				<li>@error.Value</li>
			}
		</ul>
	</div>
}

<fieldset>
	<legend>Employment Data</legend>

	<div class="row">
		<div class="col-md-2">
			<label for="title">Position Title</label>
		</div>
		<div class="col-md-2">
			<input type="text" id="title" @bind=EmploymentTitle placeholder="Enter Position" />
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="years">Years in position</label>
		</div>
		<div class="col-md-2">
			<!--step sets how our number increments when using the buttons-->
			<input type="number" id="years" @bind=EmploymentYears step="0.1" min="0"/>
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="date">Position Start Date</label>
		</div>
		<div class="col-md-2">
			<input type="date" id="date" @bind=EmploymentStart placeholder="@DateTime.Today" />
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="level">Supervisory Level</label>
		</div>
		<div class="col-md-2">
			@*
				I could do this next part manually:
				<option>Entry<option>
					etc.

					or....

					Enum.GetValues returns a list of our values I can iterate through
			*@
			<select id="level" @bind=EmploymentLevel>
				@foreach(var level in Enum.GetValues(typeof(SupervisoryLevel)))
				{
					<option value="@level">@level</option>
				}
			</select>
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<button @onclick="Submit">Submit</button>
			<button @onclick="Clear">Clear</button>
		</div>
	</div>
</fieldset>

@code {

	string FeedbackMsg = String.Empty;
	Dictionary<string, string> ErrorMsgs = new();//same as new Dictionary<string, string>();

	string EmploymentTitle = String.Empty;
	double EmploymentYears = 0.0;
	DateTime EmploymentStart = DateTime.Today;
	SupervisoryLevel EmploymentLevel = SupervisoryLevel.Entry;

	/// <summary>
	/// Checks all of our fields for errors.
	/// </summary>
	private void Submit()
	{
		//Set up a clean slate for communicating with our users
		FeedbackMsg = String.Empty;
		ErrorMsgs.Clear();

		if (String.IsNullOrWhiteSpace(EmploymentTitle))
		{
			ErrorMsgs.Add("Title", "Title can not be empty.");
		}

		if (EmploymentYears < 0)
		{
			ErrorMsgs.Add("Year", "Years can not be negative.");
		}

		if (EmploymentStart >= DateTime.Today.AddDays(1))
		{
			ErrorMsgs.Add("Start", "Start Date can not be in the future.");
		}

		//Do not need to check EmploymentLevel as there is no functional way to pass in bad data

		if(ErrorMsgs.Count == 0)
		{
			FeedbackMsg = $"Success: {EmploymentTitle}, {EmploymentYears}, {EmploymentStart}, {EmploymentLevel}";
		}
	}

	/// <summary>
	/// Resets all of our fields to default values.
	/// </summary>
	private void Clear()
	{
		FeedbackMsg = String.Empty;
		ErrorMsgs.Clear();

		EmploymentTitle = String.Empty;
		EmploymentYears = 0.0;
		EmploymentStart = DateTime.Today;
		EmploymentLevel = SupervisoryLevel.Entry;
	}
}
