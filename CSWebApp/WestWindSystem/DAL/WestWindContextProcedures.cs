// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WestWindSystem.Entities;

namespace WestWindSystem.DAL
{
    internal partial class WestWindContext
    {
        private IWestWindContextProcedures _procedures;

        public virtual IWestWindContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new WestWindContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IWestWindContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    internal partial class WestWindContextProcedures : IWestWindContextProcedures
    {
        private readonly WestWindContext _context;

        internal WestWindContextProcedures(WestWindContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Customers_GetByPartialCompanyNameResult>> Customers_GetByPartialCompanyNameAsync(string partialName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PartialName",
                    Size = 80,
                    Value = partialName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Customers_GetByPartialCompanyNameResult>("EXEC @returnValue = [dbo].[Customers_GetByPartialCompanyName] @PartialName = @PartialName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Customers_GetByPartialContactNameResult>> Customers_GetByPartialContactNameAsync(string partialName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PartialName",
                    Size = 60,
                    Value = partialName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Customers_GetByPartialContactNameResult>("EXEC @returnValue = [dbo].[Customers_GetByPartialContactName] @PartialName = @PartialName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Orders_GetByCustomerResult>> Orders_GetByCustomerAsync(string customerID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CustomerID",
                    Size = 10,
                    Value = customerID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Orders_GetByCustomerResult>("EXEC @returnValue = [dbo].[Orders_GetByCustomer] @CustomerID = @CustomerID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Orders_GetByEmployeeResult>> Orders_GetByEmployeeAsync(int? employeeID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmployeeID",
                    Value = employeeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Orders_GetByEmployeeResult>("EXEC @returnValue = [dbo].[Orders_GetByEmployee] @EmployeeID = @EmployeeID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Orders_GetByShipperResult>> Orders_GetByShipperAsync(int? shipVia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ShipVia",
                    Value = shipVia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Orders_GetByShipperResult>("EXEC @returnValue = [dbo].[Orders_GetByShipper] @ShipVia = @ShipVia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Products_GetByPartialProductNameResult>> Products_GetByPartialProductNameAsync(string partialName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PartialName",
                    Size = 40,
                    Value = partialName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Products_GetByPartialProductNameResult>("EXEC @returnValue = [dbo].[Products_GetByPartialProductName] @PartialName = @PartialName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Products_GetByPriceRangeResult>> Products_GetByPriceRangeAsync(decimal? minPrice, decimal? maxPrice, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MinPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = minPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                new SqlParameter
                {
                    ParameterName = "MaxPrice",
                    Precision = 19,
                    Scale = 4,
                    Value = maxPrice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Money,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Products_GetByPriceRangeResult>("EXEC @returnValue = [dbo].[Products_GetByPriceRange] @MinPrice = @MinPrice, @MaxPrice = @MaxPrice", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Products_GetBySupplierResult>> Products_GetBySupplierAsync(int? supplierID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SupplierID",
                    Value = supplierID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Products_GetBySupplierResult>("EXEC @returnValue = [dbo].[Products_GetBySupplier] @SupplierID = @SupplierID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Suppliers_GetByPartialCompanyNameResult>> Suppliers_GetByPartialCompanyNameAsync(string partialName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PartialName",
                    Size = 40,
                    Value = partialName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Suppliers_GetByPartialCompanyNameResult>("EXEC @returnValue = [dbo].[Suppliers_GetByPartialCompanyName] @PartialName = @PartialName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Suppliers_GetByPartialContactNameResult>> Suppliers_GetByPartialContactNameAsync(string partialName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PartialName",
                    Size = 30,
                    Value = partialName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Suppliers_GetByPartialContactNameResult>("EXEC @returnValue = [dbo].[Suppliers_GetByPartialContactName] @PartialName = @PartialName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
